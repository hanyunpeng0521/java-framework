<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置 -->
    <properties resource="generator.properties"/>

    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <!--
    context:至少需要有一个<context>元素,用于指定一组对象的环境。
    必选属性：id：用来确定一个<context>元素
    可选属性：
    1、defaultModelType：**这个属性很重要**，这个属性定义了MBG如何生成**实体类**。

        conditional 默认属性，这个模型和下面的hierarchical类似，除了如果那个单独的类将只包含一个字段，
                    将不会生成一个单独的类。因此,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,
                    将该字段合并到基本实体类中。
        flat：该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。**这种模型最简单，推荐使用。
        hierarchical：如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段，
                    则会为表生成一个包含所有BLOB字段的单独的实体类,
                   然后为所有其他的字段生成一个单独的实体类。 MBG会在所有生成的实体类之间维护一个继承关系。
    2、targetRuntime：:此属性用于指定生成的代码的运行时环境。一般使用默认值即可。
            MyBatis3:*这是默认值*
            MyBatis3Simple
            Ibatis2Java2
            Ibatis2Java5
-->

    <context id="default" targetRuntime="MyBatis3">

        <!-- optional旨在创建class时，对注释进行控制-->
        <commentGenerator>
            <!--suppressAllComments  false时打开注释，true时关闭注释-->
            <property name="suppressAllComments" value="false"/>
            <!--suppressDate  false时打开时间标志，true时关闭-->
            <property name="suppressDate" value="true"/>
        </commentGenerator>


        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driverClass}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>


        <!--非必需,java类型处理器 ，在数据库类型和java类型之间的转换控制
           用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
           注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
       -->
        <javaTypeResolver>
            <!--
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
                scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long；
                scale=0;length[5,9]：使用Integer；
                scale=0;length<5：使用Short；
            -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="com.hyp.learn.mybatis.generate.pojo" targetProject="src/main/java">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>

            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="true"/>

            <!-- 给Model添加一个父类 -->
            <!--<property name="rootClass" value=""/>-->

            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--Mapper映射文件生成器
            targetPackage：指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <sqlMapGenerator targetPackage="mapper/generate" targetProject="src/main/resources">
            <!--是否允许子包，即targetPackage.schemaName.tableName-->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口,生成易于使用的针对Model对象和XML配置文件
           targetPackage/targetProject:同javaModelGenerator
           type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
               1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），
               不会生成对应的XML；
               2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
               3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
           注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
       -->
        <javaClientGenerator targetPackage="com.hyp.learn.mybatis.generate.mapper" targetProject="src/main/java"
                             type="XMLMAPPER">
            <property name="enableSubPackages" value="false"/>
            <!--
                    定义Maper.java 源代码中的ByExample() 方法的可视性，可选的值有：
                    public;
                    private;
                    protected;
                    default
                    注意：如果 targetRuntime="MyBatis3",此参数被忽略
             -->
            <property name="exampleMethodVisibility" value=""/>
            <!--方法名计数器 :Important note: this property is ignored if the target runtime is MyBatis3.  -->
            <property name="methodNameCalculator" value=""/>

            <!--为生成的接口添加父接口-->
            <property name="rootInterface" value=""/>

        </javaClientGenerator>

        <!--
           tableName:数据库表名
           domainObjectName:实体类名
           enableCountByExample（默认true）：MyBatis3Simple为false，
               指定是否生成动态查询总条数语句（用于分页的总条数查询）；
           enableUpdateByExample：（默认true）：MyBatis3Simple为false，
               指定是否生成动态修改语句（只修改对象中不为空的属性）；
           enableDeleteByExample：enableDeleteByExample（默认true）：
               MyBatis3Simple为false，指定是否生成动态删除语句；
           enableSelectByExample：enableSelectByExample（默认true）：
               MyBatis3Simple为false，指定是否生成动态查询语句；
           selectByExampleQueryId：
           enableInsert（默认true）：指定是否生成insert语句；
           enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
           enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
           enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
           modelType：参考context元素的defaultModelType，相当于覆盖；
       -->

        <table tableName="tb_user" domainObjectName="User"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">

            <!-- optional   , only for mybatis3 runtime
                 自动生成的键值（identity,或者序列值）
               如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中
               sqlStatement 的语句将会返回新的值
               如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:
                  Cloudscape    This will translate to: VALUES IDENTITY_VAL_LOCAL()
                  DB2:      VALUES IDENTITY_VAL_LOCAL()
                  DB2_MF:       SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                  Derby:        VALUES IDENTITY_VAL_LOCAL()
                  HSQLDB:   CALL IDENTITY()
                  Informix:     select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                  MySql:        SELECT LAST_INSERT_ID()
                  SqlServer:    SELECT SCOPE_IDENTITY()
                  SYBASE:   SELECT @@IDENTITY
                  JDBC:     This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys.
This is a database independent method of obtaining the value from identity columns.
                  identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey>
element will be placed after the insert (for an identity column). If false, then the generated <selectKey> will be placed before
 the insert (typically for a sequence).

            -->
            <!--<generatedKey column="id" sqlStatement="SELECT LAST_INSERT_ID()" identity="true" type="int"/>-->


            <!-- optional.
                    列的命名规则：
                    MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，
                    作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤
                    支持正在表达式
                     searchString 表示要被换掉的字符串
                     replaceString 则是要换成的字符串，默认情况下为空字符串，可选
            -->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->


            <!-- optional.告诉 MBG 忽略某一列
                    column，需要忽略的列
                    delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配
                    是否限定表的列名，即固定表列在Model中的名称
            -->
            <!--<ignoreColumn column="PLAN_ID" delimitedColumnName="true"/>-->


            <!--optional.覆盖MBG对Model 的生成规则
                 column: 数据库的列名
                 javaType: 对应的Java数据类型的完全限定名
                 在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle "odd"
database types (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).
                 jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，
对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).
                 typeHandler:

            -->
            <!--<columnOverride column="" javaType="" jdbcType="" typeHandler="" delimitedColumnName=""/>-->

        </table>
    </context>
</generatorConfiguration>